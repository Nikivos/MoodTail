import Foundation
import UserNotifications
import Combine

@MainActor
class NotificationManager: ObservableObject {
    
    // MARK: - Published Properties
    @Published var isAuthorized: Bool = false
    @Published var reminders: [Reminder] = []
    @Published var isAnyReminderEnabled: Bool = false
    @Published var smartNotificationsEnabled: Bool = true
    
    // MARK: - Constants
    private let userDefaults = UserDefaults.standard
    private let remindersKey = "savedReminders"
    private let smartNotificationsKey = "smartNotificationsEnabled"
    
    // MARK: - Smart Notification Properties
    private var moodStorage: MoodStorageProtocol?
    private var lastNotificationTime: Date?
    private var notificationEffectiveness: [String: Int] = [:] // ID -> effectiveness score
    
    // MARK: - Initialization
    init() {
        loadReminders()
        loadSmartNotificationsSettings()
        checkNotificationStatus()
    }
    
    // MARK: - Smart Notifications Setup
    func setMoodStorage(_ storage: MoodStorageProtocol) {
        self.moodStorage = storage
    }
    
    private func loadSmartNotificationsSettings() {
        smartNotificationsEnabled = userDefaults.bool(forKey: smartNotificationsKey)
    }
    
    func toggleSmartNotifications() {
        smartNotificationsEnabled.toggle()
        userDefaults.set(smartNotificationsEnabled, forKey: smartNotificationsKey)
        print("üß† Smart notifications: \(smartNotificationsEnabled ? "enabled" : "disabled")")
    }
    
    // MARK: - Reminders Management
    private func loadReminders() {
        if let data = userDefaults.data(forKey: remindersKey),
           let savedReminders = try? JSONDecoder().decode([Reminder].self, from: data) {
            reminders = savedReminders
            print("üìã Loaded \(reminders.count) saved reminders")
        } else {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            reminders = Reminder.templates
            print("üìã Loaded \(reminders.count) default reminder templates")
        }
        updateReminderStatus()
    }
    
    private func saveReminders() {
        if let data = try? JSONEncoder().encode(reminders) {
            userDefaults.set(data, forKey: remindersKey)
            print("üíæ Saved \(reminders.count) reminders to UserDefaults")
        }
    }
    
    // MARK: - Status Checking
    func checkNotificationStatus() {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                self.isAuthorized = settings.authorizationStatus == .authorized
                self.updateReminderStatus()
                print("üîî Notification status checked: \(settings.authorizationStatus == .authorized ? "Authorized" : "Not authorized")")
            }
        }
    }
    
    private func updateReminderStatus() {
        let enabledCount = reminders.filter { $0.isEnabled }.count
        isAnyReminderEnabled = enabledCount > 0
        print("üìä Reminder status updated: \(enabledCount) enabled out of \(reminders.count) total")
    }
    
    // MARK: - Scheduling
    func scheduleReminder(_ reminder: Reminder) async {
        guard isAuthorized && reminder.isEnabled else {
            print("‚ö†Ô∏è Cannot schedule reminder: notifications not authorized (\(isAuthorized)) or reminder disabled (\(reminder.isEnabled))")
            return
        }
        
        let content = UNMutableNotificationContent()
        content.title = "MoodTail"
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let smartMessage = await generateSmartMessage(for: reminder)
        content.body = smartMessage
        content.sound = reminder.sound.soundName
        content.badge = 1
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        content.userInfo = [
            "reminderId": reminder.id.uuidString,
            "isSmartNotification": smartNotificationsEnabled
        ]
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let optimizedTime = await optimizeNotificationTime(for: reminder)
        let calendar = Calendar.current
        let timeComponents = calendar.dateComponents([.hour, .minute], from: optimizedTime)
        
        print("‚è∞ Scheduling smart reminder for \(optimizedTime) on \(reminder.daysString)")
        print("  - Smart message: \(smartMessage)")
        print("  - Time components: \(timeComponents)")
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏
        let trigger = UNCalendarNotificationTrigger(
            dateMatching: timeComponents,
            repeats: true
        )
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        let request = UNNotificationRequest(
            identifier: reminder.notificationIdentifier,
            content: content,
            trigger: trigger
        )
        
        do {
            try await UNUserNotificationCenter.current().add(request)
            print("‚úÖ Smart reminder scheduled successfully: \(reminder.notificationIdentifier)")
        } catch {
            print("‚ùå Error scheduling smart reminder: \(error)")
        }
    }
    
    func scheduleAllReminders() async {
        guard isAuthorized else {
            print("‚ö†Ô∏è Cannot schedule reminders: notifications not authorized")
            return
        }
        
        print("üîÑ Scheduling all enabled reminders...")
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await cancelAllReminders()
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Ç–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
        try? await Task.sleep(nanoseconds: 100_000_000) // 0.1 —Å–µ–∫—É–Ω–¥—ã
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        let enabledReminders = reminders.filter { $0.isEnabled }
        print("üìã Found \(enabledReminders.count) enabled reminders to schedule")
        
        for reminder in enabledReminders {
            await scheduleReminder(reminder)
        }
        
        updateReminderStatus()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await printPendingNotifications()
    }
    
    func cancelAllReminders() async {
        let center = UNUserNotificationCenter.current()
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending notifications
        let requests = await center.pendingNotificationRequests()
        let ourIdentifiers = requests.filter { request in
            request.identifier.hasPrefix("mood-reminder-")
        }.map { $0.identifier }
        
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if !ourIdentifiers.isEmpty {
            center.removePendingNotificationRequests(withIdentifiers: ourIdentifiers)
            print("üóëÔ∏è Cancelled \(ourIdentifiers.count) existing notifications")
        }
        
        await MainActor.run {
            self.isAnyReminderEnabled = false
        }
        
        print("‚úÖ All reminders cancelled")
    }
    
    // MARK: - Reminder Management
    func addReminder(_ reminder: Reminder) {
        reminders.append(reminder)
        saveReminders()
        updateReminderStatus()
        print("‚ûï Added new reminder: \(reminder.timeString) - \(reminder.message)")
    }
    
    func updateReminder(_ reminder: Reminder) {
        if let index = reminders.firstIndex(where: { $0.id == reminder.id }) {
            reminders[index] = reminder
            saveReminders()
            updateReminderStatus()
            print("‚úèÔ∏è Updated reminder: \(reminder.timeString) - \(reminder.message)")
        }
    }
    
    func deleteReminder(_ reminder: Reminder) {
        reminders.removeAll { $0.id == reminder.id }
        saveReminders()
        updateReminderStatus()
        print("üóëÔ∏è Deleted reminder: \(reminder.timeString) - \(reminder.message)")
    }
    
    func toggleReminder(_ reminder: Reminder) {
        if let index = reminders.firstIndex(where: { $0.id == reminder.id }) {
            reminders[index].isEnabled.toggle()
            saveReminders()
            updateReminderStatus()
            print("üîÑ Toggled reminder: \(reminder.timeString) - \(reminders[index].isEnabled ? "Enabled" : "Disabled")")
        }
    }
    
    // MARK: - Toggle All Reminders
    func toggleAllReminders() async {
        if isAnyReminderEnabled {
            print("üîÑ Disabling all reminders...")
            await cancelAllReminders()
        } else {
            print("üîÑ Enabling all reminders...")
            await scheduleAllReminders()
        }
    }
    
    // MARK: - Debug Methods
    func printPendingNotifications() async {
        let requests = await UNUserNotificationCenter.current().pendingNotificationRequests()
        print("üìã Pending notifications: \(requests.count)")
        for request in requests {
            print("  - ID: \(request.identifier)")
            if let trigger = request.trigger as? UNCalendarNotificationTrigger {
                print("    Date: \(trigger.dateComponents)")
                print("    Repeats: \(trigger.repeats)")
                print("    Next trigger date: \(trigger.nextTriggerDate()?.description ?? "Unknown")")
            }
        }
    }
    
    // MARK: - Authorization with Reminders
    func requestAuthorization() async -> Bool {
        do {
            let granted = try await UNUserNotificationCenter.current().requestAuthorization(
                options: [.alert, .sound, .badge]
            )
            
            await MainActor.run {
                self.isAuthorized = granted
            }
            
            if granted {
                print("‚úÖ Notification authorization granted")
                await scheduleAllReminders()
            } else {
                print("‚ùå Notification authorization denied")
            }
            
            return granted
        } catch {
            print("‚ùå Error requesting notification authorization: \(error)")
            return false
        }
    }
    
    // MARK: - Smart Notifications
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    private func generateSmartMessage(for reminder: Reminder) async -> String {
        guard smartNotificationsEnabled, let storage = moodStorage else {
            return reminder.message
        }
        
        do {
            let entries = try await storage.fetchMoodEntries(for: 30) // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ 30 –¥–Ω–µ–π
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            let recentEntries = entries.filter { 
                Calendar.current.isDate($0.safeTimestamp, inSameDayAs: Date()) ||
                Calendar.current.isDate($0.safeTimestamp, inSameDayAs: Calendar.current.date(byAdding: .day, value: -1, to: Date()) ?? Date())
            }
            
            // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏ - –º–æ—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if recentEntries.contains(where: { Calendar.current.isDate($0.safeTimestamp, inSameDayAs: Date()) }) {
                return generateMotivationalMessage()
            }
            
            // –ï—Å–ª–∏ –≤—á–µ—Ä–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ - –º—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if !recentEntries.contains(where: { Calendar.current.isDate($0.safeTimestamp, inSameDayAs: Calendar.current.date(byAdding: .day, value: -1, to: Date()) ?? Date()) }) {
                return "–ù–µ –∑–∞–±—ã–ª–∏ –ø—Ä–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏? üêï"
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            let weeklyEntries = entries.filter { 
                $0.safeTimestamp >= Calendar.current.date(byAdding: .day, value: -7, to: Date()) ?? Date()
            }
            
            if let trend = analyzeMoodTrend(weeklyEntries) {
                return generateTrendBasedMessage(trend)
            }
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
            return generateDefaultMessage()
            
        } catch {
            print("‚ùå Error generating smart message: \(error)")
            return reminder.message
        }
    }
    
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    private func analyzeMoodTrend(_ entries: [MoodEntry]) -> MoodTrend? {
        guard entries.count >= 3 else { return nil }
        
        let sortedEntries = entries.sorted { $0.safeTimestamp < $1.safeTimestamp }
        let recentEntries = Array(sortedEntries.suffix(3))
        
        let totalIntensity = recentEntries.reduce(0.0) { $0 + Double($1.safeIntensity) }
        let averageIntensity = recentEntries.count > 0 ? totalIntensity / Double(recentEntries.count) : 0.0
        let safeAverageIntensity = averageIntensity.isNaN ? 0.0 : averageIntensity
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if safeAverageIntensity >= 7.0 {
            return .improving
        } else if safeAverageIntensity <= 4.0 {
            return .declining
        } else {
            return .stable
        }
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
    private func generateTrendBasedMessage(_ trend: MoodTrend) -> String {
        switch trend {
        case .improving:
            return "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å üéâ"
        case .declining:
            return "–ó–∞–º–µ—Ç–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏? –í—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ üìù"
        case .stable:
            return "–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –æ—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—à–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ üìä"
        }
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    private func generateMotivationalMessage() -> String {
        let messages = [
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º üêï",
            "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å–æ–±–∞–∫–æ–π ‚ú®",
            "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–º–æ–≥–∞—é—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ üéØ"
        ]
        return messages.randomElement() ?? "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üêï"
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    private func generateDefaultMessage() -> String {
        let messages = [
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ —Å–µ–≥–æ–¥–Ω—è? üêï",
            "–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ üìù",
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üêæ",
            "–ö–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –≤–∞—à —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏–π –¥—Ä—É–≥? üêï"
        ]
        return messages.randomElement() ?? "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏? üêï"
    }
    
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    private func optimizeNotificationTime(for reminder: Reminder) async -> Date {
        guard smartNotificationsEnabled, let storage = moodStorage else {
            return reminder.time
        }
        
        do {
            let entries = try await storage.fetchMoodEntries(for: 7) // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ 7 –¥–Ω–µ–π
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
            let recentEntries = entries.filter { 
                $0.safeTimestamp >= Calendar.current.date(byAdding: .day, value: -7, to: Date()) ?? Date()
            }
            
            if !recentEntries.isEmpty {
                // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                let hourCounts = Dictionary(grouping: recentEntries) { entry in
                    Calendar.current.component(.hour, from: entry.safeTimestamp)
                }.mapValues { $0.count }
                
                if let mostPopularHour = hourCounts.max(by: { $0.value < $1.value })?.key {
                    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞ 30 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ
                    let optimizedHour = max(mostPopularHour - 1, 8) // –ù–µ —Ä–∞–Ω—å—à–µ 8 —É—Ç—Ä–∞
                    var components = Calendar.current.dateComponents([.hour, .minute], from: reminder.time)
                    components.hour = optimizedHour
                    components.minute = 0
                    
                    if let optimizedTime = Calendar.current.date(from: components) {
                        print("‚è∞ Optimized notification time: \(optimizedTime)")
                        return optimizedTime
                    }
                }
            }
            
        } catch {
            print("‚ùå Error optimizing notification time: \(error)")
        }
        
        return reminder.time
    }
    
    /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    func trackNotificationEffectiveness(reminderId: String, wasEffective: Bool) {
        let currentScore = notificationEffectiveness[reminderId] ?? 0
        let newScore = wasEffective ? currentScore + 1 : max(currentScore - 1, 0)
        notificationEffectiveness[reminderId] = newScore
        
        print("üìä Notification effectiveness for \(reminderId): \(newScore)")
    }
}

// MARK: - Mood Trend Enum
enum MoodTrend {
    case improving
    case declining
    case stable
} 